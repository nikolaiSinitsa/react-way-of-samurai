{"version":3,"file":"static/js/890.a75b16c7.chunk.js","mappings":"4LACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAA+K,8B,wFCG3KA,EAA6B,SAACC,GAAK,MAAM,CACzCC,OAAQD,EAAME,KAAKD,OACtB,E,UCLD,EAAyB,uBAAzB,EAAyD,uBCIzD,WAAgBE,GACZ,IAAMC,EAAI,UAAMD,EAAME,IACtB,OACI,gBAAKC,UAAS,UAAKC,EAAQ,YAAIA,GAAW,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SACbD,EAAMM,QAItB,ECbD,EAA0B,yBCE1B,WAAgBN,GAEZ,OACI,gBAAKG,UAAWC,EAAU,SACrBJ,EAAMO,SAGlB,E,oBCWD,GCPoCC,EAAAA,KAAaC,MAAO,CACpDH,KAAME,EAAAA,KACDE,IAAK,EAAG,oCACRC,IAAK,GAAI,sCACTC,SAAU,gBAGoBJ,EAAAA,KAAaC,MAAO,CACvDF,QAASC,EAAAA,KACJE,IAAK,EAAG,oCACRC,IAAK,GAAI,sCACTC,SAAU,cACfC,SAAUL,EAAAA,KACLE,IAAK,EAAG,oCACRC,IAAK,GAAI,sCACTC,SAAU,iBDRJE,E,QAAAA,KACXC,EAAAA,EAAAA,KAdoB,SAAClB,GACrB,MAAO,CACHmB,YAAanB,EAAMmB,YAE3B,IAC2B,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAyBD,GACtC,EAER,KLZgC,SAACE,GAAe,IACtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAKvB,MAAMF,QACT,SAACuB,GAAS,UAAKE,KAAKvB,SADI,SAAC,KAAQ,CAACK,GAAI,UAEjD,KAAC,EAJkB,CAASmB,EAAAA,WAOhC,OADmCT,EAAAA,EAAAA,IAAQnB,EAARmB,CAAoCO,EAE3E,GKKA,EEZA,SAAgBtB,GACZ,IAAIH,EAAQG,EAAMgB,YACdS,EAAkB5B,EAAM6B,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACC,EAAM,CAACvB,KAAMsB,EAAOtB,KAAsBJ,GAAI0B,EAAO1B,IAAtB0B,EAAO1B,GAAoB,IACzG4B,EAAmBjC,EAAMkC,SAASJ,KAAI,SAAApB,GAAO,OAAI,SAACyB,EAAO,CAACzB,QAASA,EAAQA,QAA0BU,SAAUjB,EAAMiB,UAA5BV,EAAQL,GAA+B,IAEpI,OACI,iBAAKC,UAAWC,EAAU,WACtB,gBAAKD,UAAWC,EAAc,SACzBqB,KAEL,iBAAKtB,UAAWC,EAAe,UAC1B0B,GACD,SAAC,KAAM,CACHG,cAAe,CAAC1B,QAAS,IACzB2B,gBAAc,EAEdC,SAAU,SAACC,EAAO,GAAiB,IAAhBC,EAAS,EAATA,UACfrC,EAAMkB,YAAYkB,EAAO7B,SACzB8B,GACA,EAAE,UACF,UAAC,KAAI,YACD,SAAC,KAAK,CAAC/B,KAAK,UAAUgC,KAAK,UAC3B,SAAC,KAAY,CAAChC,KAAK,UAAUiC,UAAU,SACvC,mBAAQD,KAAK,SAAQ,oCAMhD,I","sources":["webpack://react-way-of-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","hoc/withAuthRedirect.js","webpack://react-way-of-samurai/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.jsx","webpack://react-way-of-samurai/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsContainer.jsx","utils/validators/validators.js","components/Dialogs/Dialogs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsList\":\"Dialogs_dialogsList__x-Ogl\",\"dialog\":\"Dialogs_dialog__htSTl\",\"active\":\"Dialogs_active__t8cjl\",\"messagesList\":\"Dialogs_messagesList__gG7Cl\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from 'react'\nimport {Navigate} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n})\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to={'/Login'} />\n            return <Component {...this.props} />\n        }\n    }\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__5HDuH\",\"active\":\"Dialog_active__RnDaX\"};","import React  from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Dialog.module.css';\n\n\nexport default (props) => {\n    const path = `${props.id}`; \n    return (\n        <div className={`${s.dialog} ${s.active}`}>\n            <NavLink to={path}>\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__rjHQQ\"};","import React  from 'react';\nimport s from './Message.module.css';\n\nexport default (props) => {\n    \n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport {sendMessageActionCreater} from '../../redux/dialogs-reducer';\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport Dialogs from \"./Dialogs\";\nimport {compose} from \"redux\";\n\nconst mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newPostText) => {\n            dispatch(sendMessageActionCreater(newPostText));\n        },\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);","import * as Yup from \"yup\";\n\nexport const validateEmail = values => {\n    const errors = {};\n    if (!values.email) {\n        errors.email = 'Required 1';\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test( values.email )\n    ) {\n        errors.email = 'Invalid email address';\n    }\n    return errors;\n};\n\nexport const validationSchemaName = Yup.object().shape( {\n    name: Yup.string()\n        .min( 2, \"Must be longer than 2 characters\" )\n        .max( 30, \"Must be shorter than 30 characters\" )\n        .required( \"Required 2\" )\n});\n\nexport const validationSchemaMessage = Yup.object().shape( {\n    message: Yup.string()\n        .min( 2, \"Must be longer than 2 characters\" )\n        .max( 30, \"Must be shorter than 30 characters\" )\n        .required( \"Required 2\" ),\n    postText: Yup.string()\n        .min( 2, \"Must be longer than 2 characters\" )\n        .max( 30, \"Must be shorter than 30 characters\" )\n        .required( \"Required 2\" )\n});\n","import React from 'react';\nimport Dialog from './Dialog/Dialog';\nimport Message from './Message/Message';\nimport s from './Dialogs.module.css';\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {validationSchemaMessage} from \"../../utils/validators/validators\";\n\n\n\nexport default (props) => {\n    let state = props.dialogsPage;\n    let dialogsElements = state.Dialogs.map(dialog => <Dialog name={dialog.name} key={dialog.id} id={dialog.id}/>);\n    let messagesElements = state.Messages.map(message => <Message message={message.message} key={message.id} dispatch={props.dispatch}/>)\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsList}>\n                {dialogsElements}\n            </div>\n            <div className={s.messagesList}>\n                {messagesElements}\n                <Formik\n                    initialValues={{message: \"\"}}\n                    validateOnBlur\n                    // validationSchema={validationSchemaMessage}\n                    onSubmit={(values,{resetForm}) => {\n                        props.sendMessage(values.message);\n                        resetForm()\n                        }}>\n                        <Form>\n                            <Field name=\"message\" type=\"text\"/>\n                            <ErrorMessage name='message' component=\"div\"/>\n                            <button type=\"submit\">Send message</button>\n                        </Form>\n                </Formik>\n            </div>\n        </div>\n    )\n}"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","props","path","id","className","s","to","name","message","Yup","shape","min","max","required","postText","compose","connect","dialogsPage","dispatch","sendMessage","newPostText","sendMessageActionCreater","Component","RedirectComponent","this","React","dialogsElements","Dialogs","map","dialog","Dialog","messagesElements","Messages","Message","initialValues","validateOnBlur","onSubmit","values","resetForm","type","component"],"sourceRoot":""}